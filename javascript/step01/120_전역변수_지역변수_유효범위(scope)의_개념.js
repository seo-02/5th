/**
변수(데이터가 저장되는 자료구조적인 측면에서 보면)
	일반변수

	객체변수	
	배열변수
	함수변수

변수(영향을 미치는 유효범위 scope 측면에서 보면)
	전역변수(함수 밖에서 선언)
	지역변수(함수 안에서 선언)

참고내용
    변수의 파괴 시기가 다르다. 변수는 값을 기억하기 위해 메모리를 할당받아 사용한다. 변수를 다 사용했으면 파괴되는데 변수를 파괴한다는 것은 이 변수가 차지하고 있던 메모리를 회수한다는 뜻이다. 시스템의 메모리가 무한하지 않으므로 변수는 필요할 때만 메모리를 차지하며 다 사용하면 다른 변수를 위해 자리를 내 주어야 한다. 변수의 메모리가 회수되면 변수의 존재 자체가 사라진다.

    전역변수는 프로그램에 소속되어 있고 모든 함수에서 사용 가능해야 하므로 프로그램이 실행중인 동안에는 파괴되지 않는다. 실행 직후에 생성되어 프로그램이 실행되는 동안에는 계속 메모리를 차지하고 있으며 프로그램이 종료되면 비로소 파괴된다. 즉, 전역변수는 프로그램과 운명을 같이 한다.

    지역변수는 특정 함수 내부에서만 사용되므로 함수가 실행중일 때만 메모리를 차지하며 함수가 끝나면 변수의 생명도 끝이 난다. 함수의 임무를 위해 생성되는 임시 기억 장소이기 때문에 함수가 종료되면 더 이상 이 변수를 유지할 필요가 없어진다. 즉, 지역변수는 자신이 속해 있는 함수와 운명을 같이 한다. 함수가 호출되면 생성되고 함수가 끝나면 파괴된다. 그러다가 또 함수가 호출되면 생성되고 파괴되기를 계속 반복한다.    
 */

let username = '홍길동';//runFn 함수 입장에서 보면 전역변수

//선언식함수 runFn
function runFn(){
    //함수밖에서 선언한 전역변수를 사용할 수 있다.
    console.log(username + ' 달려~!');//1
    username = '둘리';

    //지역변수 선언
    let address = '서울시 쌍문동';
    console.log(username+'는 '+address+'에 살아요~!');//2
}


console.log(username+'는 '+address+'에 살아요~!');//함수내에서 선언한 지역변수 address를 인식하지 못하여 에러발생~!

runFn();//호출하면 함수는 역할을 다하고 소멸된다.(지역변수가 먼저 소멸)


console.log('username='+username);//3 여기서 +(더하기)는 연결연산자
console.log('username=',username);//4 콘솔함수의 특징중 하나는 ,(콤마) 단위로 출력됨






